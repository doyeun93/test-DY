const qsEl = (el, x) => el.querySelector(x);
const qsaEl = (el, x) => el.querySelectorAll(x);

const addEvt = (ele, evt, fn) => ele.addEventListener(evt, fn);
  


// 프로젝트 영역


const pbox = document.querySelector(".pg3");

let pcode = "<ul>";


for(let i=1; i<=7; i++) {
    pcode += `
        <li>
            <img src="./images/project/p1_${i}.png" 
            alt="갤러리이미지">
        </li>
    `;
} ///// for /////

pcode += "</ul>";


pbox.innerHTML = pcode;


let target = qsEl(pbox,'ul');


// 기준값 업데이트 함수 : 윈도우 가로폭의 1/4 => li 하나 크기
// window.innerWidth/4
const updateCriteria = () => qsaEl(target,"li")[0].offsetWidth;

// 기준값(대상 li의 가로크기값)
let criteria = updateCriteria();

// 리사이즈시 업데이트
addEvt(window,"resize",
    ()=> {criteria = updateCriteria();  
});


// 현재 translate 값
let currVal = 0;


function moveGallery(){
    // 현재값 1씩 감소

    target.style.translate = --currVal + "px";

    if(currVal <= Math.floor(-criteria)){
        // 1. 맨앞 li 맨뒤로 이동 /  appendChild(맨앞 li)
        // 맨 앞 li는 새로 구해와야함(계속 변경되기때문에)
        target.appendChild(qsaEl(target,"li")[0]);


        // 2. translate 값 초기화
        target.style.translate =  "0px";

        // 3. 하나 크기만큼 나가면 currVal값 초기화
        currVal = 0;

    } ///////////////// if 문 /////////
    
    // 재귀호출(타임아웃함수로 호출함)
    // stopSts 변수값이 false일 때만 실행하기
    if(!stopSts)
    setTimeout(moveGallery,10);

} //////// moveGallery ///////////////


// 대상에 마우스 오버시 멈추고 아웃시 다시 흘러가게하기
// 멈춤상태 변수
let stopSts = false;


addEvt(pbox,"mouseenter",()=>{
    //  멈춤상태변수 true변경
    stopSts = true;

});

addEvt(pbox,"mouseleave",()=>{
    //  멈춤상태변수 false 변경
    stopSts = false;
    // 재귀호출함수 호출하기
    moveGallery();
});



